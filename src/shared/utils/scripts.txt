const groupBy = (items: any, key: any) =>
      items.reduce(
        (result: any, item: any) => ({
          ...result,
          [item[key]]: [...(result[item[key]] || []), item],
        }),
        {},
      );



 const flatten = routes => {
      return routes.reduce((acc, r) => {
        if (r.categorias && r.categorias.length) {
          acc = acc.concat(flatten(r.categorias));
        } else {
          acc.push(r);
        }

        return acc;
      }, []);
    };
function flattenDeep(arr1) {
      return arr1.reduce(
        (acc, val) =>
          Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val),
        [],
      );
    }


function flatDeep(arr, d) {
      return d > 0
        ? arr.reduce(
            (acc, val) =>
              acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val),
            [],
          )
        : arr.slice();
    }

function transformToTree(arr){
    var nodes = {};
    return arr.filter(function(obj){
        var id = obj["name"],
            parentId = obj["parent"];

        nodes[id] = Object.assign(obj, nodes[id], { children: [] });
        parentId && (nodes[parentId] = (nodes[parentId] || { children: [] }))["children"].push(obj);

        return !parentId;
    });
}


function getNestedChildren(arr, parent) {
    var out = []
    for(var i in arr) {
        if(arr[i].parent == parent) {
            var children = getNestedChildren(arr, arr[i].id)

            if(children.length) {
                arr[i].children = children
            }
            out.push(arr[i])
        }
    }
    return out
}



 function getNestedChildren(arr, parent, cont) {
      const out = [];
      cont += 1;
      for (const i in arr) {
        if (arr[i].categoria_id === parent) {
          // arr[i].titulo = `${cont}---${arr[i].titulo}`;

          const subcategorias = getNestedChildren(arr, arr[i].id, cont);

          if (cont > 0) {
            const c = 0;
            while (c < cont) {
              arr[i].titulo = `---${arr[i].titulo}`;
              // arr[i].titulo = `-${arr[i].titulo}`;

              c += 1;
            }
          }

          out.push(arr[i]);
          if (subcategorias.length) {
            // arr[i].subcategorias = subcategorias;
            subcategorias.forEach(dd => {
              out.push(dd);
            });
          }
        }
      }
      return out;
    }

    const lista = getNestedChildren(listacategorias, null, -1);
    return lista;
  }


export default function (data: any) {
  // const categorias = [];
  const subcategorias = [];

  function buildTree(item: any) {
    const children = data.filter(child => child.ca === item.id);
    if (children.length > 0) {
      children.map(buildTree).forEach();
    }
    return children;
  }

  const firstLevel = data.filter(item => !item.ca);
  const getFirstList = firstLevel.map(buildTree);
  getFirstList.forEach(cat => subcategorias.push(cat));


}


function getCategoriasSubcategorias(categories: ICategorias[]) {
      const categoriesWithSubcategories = categories.map(category => ({
        ...category,
        subcategory: categories.filter(c => c.id === category.categoria_id),
      }));

      return categoriesWithSubcategories;
    }



       for (const i in arr) {
        if (arr[i].categoria_id === parent) {
          const subcategorias = getNestedChildren(arr, arr[i].id, cont);
          const categorias = arr;
          if (cont > 0) {
            let c = 0;
            while (c < cont) {
              categorias[i].titulo = `---${categorias[i].titulo}`;

              c += 1;
            }
          }

          out.push(arr[i]);
          if (subcategorias.length) {
            subcategorias.forEach(subc => {
              out.push(subc);
            });
          }
        }
      }

